export const msg = {
  common: {
    unexpectedError: 'Oops! Something went wrong. Please try again later.',
    unauthorized: 'You are not authorized to perform this action.',
    invalidToken: 'Session expired or token is invalid. Please log in again.',
    tokenNotFound: 'Token not found',
    serverError: 'Internal server error. Please contact support.',
    invalidId: 'No matching record found for the given ID.',
    fetchSuccess: 'Data retrieved successfully.',
    createSuccess: 'Record created successfully.',
    updateSuccess: 'Record updated successfully.',
    deleteSuccess: 'Record deleted successfully.',
    deleteFailed: 'Failed to delete the record.',
    notFound: 'The requested resource was not found.',
    alreadyExists: 'A similar record already exists.',
    invalidInput: 'Input validation failed. Please check your data.',
    missingFields: 'Some required fields are missing.',
    invalidEmail: 'Please provide a valid email address.',
    invalidPhone: 'Phone number format is invalid.',
    phoneExists: 'Phone number already exists.',
    invalidDate: 'Date format is not valid.',
    invalidPassword: 'Password does not meet security requirements.',
    passwordMismatch: 'Passwords do not match.',
    emailAlreadyExists: 'This email is already registered.',
    usernameAlreadyExists: 'This username is already taken.',
    requiredAllFields: 'Please fill in all required fields.',
    languageInvalid: 'Invalid language code provided.',
    languageUpdateSuccess: 'Language settings updated successfully',
    noChanges: 'No changes detected in the provided data.',
  },
  admin: {
    createSuccess: 'Admin created successfully.',
    fetchSuccess: 'Admins fetched successfully.',
    updateFailed: 'Failed to update admin details.',
    fetchFailed: 'Failed to fetch admin data.',
    updateSuccess: 'Admin updated successfully.',
    deleteSuccess: 'Admin deleted successfully.',
    notFound: 'Admin not found.',
    emailExists: 'An admin with this email already exists.',
    phoneExists: 'An admin with this phone number already exists.',
    invalidId: 'Invalid admin ID provided.',
  },

  customer: {
    createSuccess: 'Customer registered successfully.',
    fetchSuccess: 'Customer data fetched successfully.',
    fetchFailed: 'Failed to fetch customer data.',
    updateSuccess: 'Customer details updated.',
    updateFailed: 'Unable to update customer details.',
    deleteSuccess: 'Customer removed successfully.',
    deleteFailed: 'Failed to remove customer.',
    notFound: 'Customer not found.',
    idNotFound: 'No customer found with the provided ID.',
    emailAlreadyExists: 'A customer with this email already exists.',
  },

  auth: {
    signupSuccess: 'Customer signed up successfully.',
    loginSuccess: 'Login successful.',
    logoutSucces: 'Logout successful',
    registerSuccess: 'Registration successful.',
    customerNotFound: 'Customer not found.',
    invalidPassword: 'Invalid password.',
    emailExists: 'Email already exists.',
    phoneExists: 'Phone number already exists.',
    passwordMismatch: 'Passwords do not match.',
    resetTokenGenerated: 'Reset token generated successfully.',
    invalidResetToken: 'Invalid or expired reset token.',
    passwordResetSuccess: 'Password reset successfully.',
    profileFetchSuccess: 'profile feched succesfully',
    resetTokenSent: 'Password reset token sent to your email.',
  },
  employee: {
    createSuccess: 'Employee created successfully.',
    fetchSuccess: 'Employees fetched successfully.',
    emailExists: 'Employee email already exists.',
    updateSuccess: 'Employee updated successfully',
    deleteSuccess: 'Employee deleted successfully',
    notFound: 'Employee not found',

    emailAlreadyExists: 'An employee with this email already exists.',
    phoneAlreadyExists: 'An employee with this phone number already exists.',
    invalidId: 'Invalid employee ID provided.',
  },

  job: {
    createSuccess: 'Job posted successfully.',
    fetchSuccess: 'Job details fetched successfully.',
    updateSuccess: 'Job details updated.',
    deleteSuccess: 'Job deleted successfully.',
    notFound: 'Job not found.',
    // skuExists: "A job with this SKU already exists.",
    skuExists: (sku: string) => `Job SKU '${sku}' already exists.`,
    invalidName: 'Job name must be between 2 to 50 characters.',
  },
  employeeJob: {
    assignSuccess: 'Job assigned to employee(s) successfully.',
    fetchSuccess: 'Employee job assignments fetched successfully.',
  },
  globalConfig: {
    notFound: 'Global config not found.',
    fetchSuccess: 'Global config retrieved successfully.',
  },
  validation: {
    firstName: {
      required: 'First name is required',
      max: 'Maximum 50 characters allowed',
      regex: 'First name must not contain numbers or special characters',
    },
    lastName: {
      required: 'Last name is required',
      max: 'Maximum 50 characters allowed',
      regex: 'Last name must not contain numbers or special characters',
    },
    email: {
      invalid: 'Invalid email address',
      required: 'Email is required',
      exists: 'Email already exists',
    },
    phone: {
      exactLength: 'Phone number must be exactly 10 digits',
      onlyDigits: 'Phone number must contain only digits',
      exists: 'Phone number already exists',
    },
    password: {
      min: 'Password must be at least 8 characters',
      uppercase: 'Password must contain at least one uppercase letter',
      lowercase: 'Password must contain at least one lowercase letter',
      number: 'Password must contain at least one number',
      specialChar: 'Password must contain at least one special character',
      mismatch: 'Passwords do not match',
      newRequired: 'New password is required',
      pattern:
        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character',
    },
    confirmPassword: {
      required: 'Confirm password is required',
      min: 'Confirm password must be at least 8 characters',
    },
    token: {
      required: 'Reset token is required',
    },
    status: {
      enum: 'Status must be one of: active, inactive, restricted, or blocked',
    },
    job: {
      nameMin: 'Job name must be at least 2 characters',
      nameMax: 'Job name must be at most 50 characters',
      skuRequired: 'Job SKU is required',
      skuMax: 'Job SKU must be at most 20 characters',
      categoryMin: 'Job category must be at least 2 characters',
      categoryMax: 'Job category must be at most 50 characters',
      skuExists: (sku: string) => `Job SKU '${sku}' already exists`,
    },
    employeeJob: {
      empIdType: 'emp_id must be a number',
      empIdRequired: 'emp_id is required',
      empIdNotFound: 'employee ID does not exist',
      jobIdType: 'job_id must be a number',
      jobIdRequired: 'job_id is required',
      jobIdNotFound: 'Job ID does not exist',
      empIdsEmpty: 'emp_ids array cannot be empty',
    },
  },
};
