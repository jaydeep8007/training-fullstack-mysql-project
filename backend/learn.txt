findOne({ where: { ... } })	   findOne({ ... })
findAll()	                   find()
findByPk(id)	               findById(id)
update(..., { where })	       findByIdAndUpdate(id, update, { new: true })
destroy({ where })	           findByIdAndDelete(id)





No, you cannot use refine or superRefine alone to check email uniqueness with the database, because:

Zod's refine and superRefine only support synchronous logic.

❌ Why this won’t work for DB:

cus_email: z.string().email().refine(async (email) => {
  const exists = await employeeModel.findOne({ emp_email: email });
  return !exists;
}, {
  message: "Email already exists",
});
This will throw an error like:

Error: Async refinement passed to synchronous refine

,


Explanation of important options:

Option          Values/Type                                    Description
-----------------------------------------------------------------------------------------
locale          "en", "fr", "de", "zh", "es", "sv", "tr",    Language locale that determines collation rules
                etc. (BCP 47 codes)                            (sorting order, accents, etc.)

strength        1 to 5                                        Level of comparison sensitivity:
                                                             1: base chars only
                                                             2: base + case-insensitive
                                                             3: base + case + accents
                                                             4: base + case + accents + variant
                                                             5: identical (Unicode code point)

caseLevel       true or false                                 When true, uppercase is distinguished from
                                                             lowercase at a secondary level

numericOrdering true or false                                 When true, numeric substrings in strings are
                                                             compared as numbers ("2" < "10"). Default is false

alternate       "shifted" or "non-ignorable"                  Determines whether spaces and punctuation are
                                                             considered in comparisons (shifted ignores them)

maxVariable     "punct" or "space"                             Specifies which characters are ignored when
                                                             alternate is shifted

backwards       true or false                                 For French locale, compare accents from the end
                                                             of the string

                                                             {
 example --> locale: "en",
        strength: 2  // Case-insensitive, accent-sensitive
       }

default -->{
  locale: "simple",
  strength: 4,
  caseLevel: false,
  numericOrdering: false,
  alternate: "non-ignorable",
  maxVariable: "punct",
  backwards: false,
}


Use Case	                        Recommended Collation
Fast lookups, general use	        utf8_general_ci
Accurate multilingual comparisons	utf8_unicode_ci or utf8mb4_unicode_ci
Emoji or full Unicode support	    utf8mb4_unicode_ci
Case-sensitive usernames,passwords	utf8mb4_bin


query for fetch customer with its employee 
...........................................
SELECT 
  `customer`.`cus_id`, 
  `customer`.`cus_name`, 
  `customer`.`cus_email`,
  `customer`.`cus_mobile_number`, 
  -- all other customer columns...

  `employee`.`emp_id`, 
  `employee`.`emp_name`, 
  `employee`.`emp_email`, 
  `employee`.`emp_mobile_number`

FROM `customer`

LEFT OUTER JOIN `employee` AS `employee`
  ON `customer`.`cus_id` = `employee`.`cus_id`

WHERE `customer`.`cus_id` = <req.params.id>;





now the real chalange begins now i want to create dynamic pages in frontend with this global config like i have in databse create smtp settings and email settings and language settings created in global config table in this all this type of json fields and all have in db i share u json file {
  "global_config_label": "SMTP Settings",
  "global_config_slug": "smtp_settings",
  "global_config_sequence": 1,
  "global_config_json": {
    "smtp_host": "",
    "smtp_port": "",
    "smtp_username": "",
    "smtp_password": ""
  },
  "global_config_fields": [
    {
      "key": "smtp_host",
      "label": "SMTP Host",
      "type": "text",
      "required": true,
      "placeholder": "Enter SMTP host"
    },
    {
      "key": "smtp_port",
      "label": "SMTP Port",
      "type": "text",
      "required": true,
      "placeholder": "Enter SMTP port"
    },
    {
      "key": "smtp_username",
      "label": "SMTP Username",
      "type": "text",
      "required": true,
      "placeholder": "Enter SMTP username"
    },
    {
      "key": "smtp_password",
      "label": "SMTP Password",
      "type": "password",
      "required": true,
      "placeholder": "Enter SMTP password"
    }
  ],
  "global_config_view": true
} okey so this is one smtp setting with slug i want to get to one page toanothe page yes this is after showing page but want to first get data from this global config and then if there is 3 settings it shows 3 settings if i add 4th setting in my db it automatically set this page to frontend so give me step by step path how to acheave this from backend to frontend which api i need to create and all okey 



roles and permission 

rate limiting --> token bucket (easily exploid by greedy client) , leaky bucket

mailiator , putbox 
useDispatch for api 

| Method                         | Description                         | Use Case                            | UI Customization                       |
| ------------------------------ | ----------------------------------- | ----------------------------------- | -------------------------------------- |
| ✅ `checkout.sessions.create()` | Stripe Checkout (hosted page)       | Quick & simple integration          | ❌ Limited customization                |
| ✅ `paymentIntents.create()`    | Payment Intents API (Element-based) | Full custom UI with Stripe Elements | ✅ Full control                         |
| ✅ `setupIntents.create()`      | For saving cards without payment    | E.g. "save for later"               | ✅ Custom UI                            |
| ✅ `subscription.create()`      | For recurring payments              | Subscriptions/memberships           | Depends (can use Checkout or Elements) |
